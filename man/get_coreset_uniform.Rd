% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_coreset_uniform.R
\name{get_coreset_uniform}
\alias{get_coreset_uniform}
\title{Function for getting uniform Bayesian coresets for logistic regression}
\usage{
get_coreset_uniform(
  x,
  y,
  m = NA,
  num_clusters = NA,
  r = 4,
  seed = 1234,
  verbose = FALSE
)
}
\arguments{
\item{x}{a feature matrix of dimension n x d}

\item{y}{a response vector of dimension n x 1}

\item{m}{(optional) a scalar, indicating the maximum number of data points that 
will be included in the returned Bayesian coreset. If not specified, this 
value will be set to n/10 rounded down to the nearest integer.}

\item{num_clusters}{(optional) the number of clusters for kmeans.
If not specified, this value will be set to 4 for data with fewer than 10,000
observations, and to n/2500 rounded down to the nearest integer for data
with more than 10,000 observations.}

\item{r}{(optional) the radius of the ball representing the parameter space.
Must be greater than 0. Per Huggins et. al., the default is to set to 4.}

\item{seed}{(optional) a value to set the seed. Since the uniform
coreset method is not deterministic, given all other function inputs remain
the same, this value can be set to ensure that the same coreset is returned.}

\item{verbose}{(optional) default is FALSE. If set to TRUE, status messages
will be printed while the function runs.}
}
\value{
a list containing the following elements:
  \itemize{
    \item datapoints_selected - the indices for the data points selected to
          be part of the coreset.
    \item weights - the computed weights for each point in the coreset.
    \item xc - the feature matrix containing only the coreset data points.
    \item yc - the reponse vector containing only the responses for the
          observations in the coreset.
  }
}
\description{
This function implements the algorithm described in the paper
  \href{https://arxiv.org/abs/1605.06423}{Coresets for Scalable Bayesian
  Logistic Regression}.
  It is a simplified version of the algorithm written in Python by the paper's
  first author, Jonathan H. Huggins, which is available
  \href{https://bitbucket.org/jhhuggins/lrcoresets/src/master/}{here}.
}
\examples{
# Using the defaults

## simulate binary data
data <- simulate_logit_data()
get_coreset_uniform(data$x, data$y)

# Customizations

## choose number of kmeans clusters
get_coreset_uniform(data$x, data$y, num_clusters = 5)

## change radius of parameter space
get_coreset_uniform(data$x, data$y, r = 3)

## change maximum coreset size
get_coreset_uniform(data$x, data$y, m = 500)

## set the seed
get_coreset_uniform(data$x, data$y, seed = 5678)
}
