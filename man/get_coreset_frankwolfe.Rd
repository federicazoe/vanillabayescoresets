% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_coreset_frankwolfe.R
\name{get_coreset_frankwolfe}
\alias{get_coreset_frankwolfe}
\title{Function for implementing Bayesian Coresets with the Hilbert Frank Wolfe 
method}
\usage{
get_coreset_frankwolfe(
  x,
  y,
  m = NA,
  num_projections = 500,
  seed = 1234,
  verbose = FALSE
)
}
\arguments{
\item{x}{a (n x d) covariate matrix.}

\item{y}{a (n x 1) vector of {-1, 1} observed data.}

\item{m}{(optional) a scalar, indicating the maximum number of data points that 
will be included in the returned Bayesian coreset. If not specified, this 
value will be set to n/10 rounded down to the nearest integer.}

\item{num_projections}{a scalar indicating the dimension of finite-dimensional 
approximation of log-likelihood to be used.}

\item{seed}{(optional) a value to set the seed. Since the uniform
coreset method is not deterministic, given all other function inputs remain
the same, this value can be set to ensure that the same coreset is returned.}

\item{verbose}{(optional) default is FALSE. If set to TRUE, status messages
will be printed while the function runs.}
}
\value{
a list containing the following elements:
  \itemize{
    \item datapoints_selected - the indices for the data points selected to
          be part of the coreset.
    \item weights - the computed weights for each point in the coreset.
    \item xc - the feature matrix containing only the coreset data points.
    \item yc - the reponse vector containing only the responses for the
          observations in the coreset.
  }
}
\description{
This function implements Algorithm 2 and 3 described in the paper
  \href{https://arxiv.org/abs/1710.05053}{Automated Scalable Bayesian Inference 
  via Hilbert Coresets} for the case of logistic regression.
  It is a simplified version of the algorithm written in Python by the paper's
  first author, Trevor Campbell, which is available
  \href{https://github.com/trevorcampbell/bayesian-coresets}{here}. For
  obtaining the approximate posterior required in order to compute 
  (approximate) sensitivities and norms it uses the function `LaplaceApproximation()`
  from the package `LaplacesDemon`.
}
\examples{
# Using the defaults

## simulate binary data
data <- simulate_logit_data()
get_coreset_frankwolfe(data$x, data$y)

# Customizations

## choose number of projections
get_coreset_frankwolfe(data$x, data$y, num_projections = 1000)

## change coreset size
get_coreset_frankwolfe(data$x, data$y, m = 100)

## set the seed
get_coreset_frankwolfe(data$x, data$y, seed = 5678)
}
